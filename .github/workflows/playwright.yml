name: Playwright Tests
env:
  NODE_ENV: test
  BASE_URL: https://release-v2-0-0--gateway-edit.netlify.app/
  USERNAME: ${{ secrets.USERNAME }}
  PASSWORD: ${{ secrets.PASSWORD }}
  USERNAME2: ${{ secrets.USERNAME2 }}
  PASSWORD2: ${{ secrets.PASSWORD2 }}
on:
  push:
    branches: [main, master, Previous Workflow]
  pull_request:
    branches: [main, master, Previous Workflow]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    outputs:
      visual-snapshots: ${{ steps.publish.outputs.visual-snapshots }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: latest
      - name: Install dependencies
        run: npm ci
      - name: Prepare Playwright env
        working-directory: ./path/to/tests
        run: |
          npm ci
          PLAYWRIGHT_VERSION=$(npm ls --json @playwright/test | jq --raw-output '.dependencies["@playwright/test"].version')
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV

      - name: Cache Playwright browser binaries
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: "~/.cache/ms-playwright"
          key: "${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}"
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browser binaries & OS dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        working-directory: ./path/to/tests
        run: |
          npx playwright install --with-deps

      - name: Install Playwright OS dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        working-directory: ./path/to/tests
        run: |
          npx playwright install-deps

      # - name: Get installed Playwright version
      #   id: playwright-version
      #   run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package-lock.json').dependencies['@playwright/test'].version)")" >> $GITHUB_ENV
      # - name: Cache playwright binaries
      #   uses: actions/cache@v3
      #   id: playwright-cache
      #   with:
      #     path: |
      #       ~/.cache/ms-playwright
      #     key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
      # - run: npm ci
      # - run: npx playwright install --with-deps
      #   if: steps.playwright-cache.outputs.cache-hit != 'true'
      # - run: npx playwright install-deps
      #   if: steps.playwright-cache.outputs.cache-hit != 'true'
      # - name: Install Playwright Browsers
      # run: npx playwright install --with-deps
      - name: Run Playwright tests
        continue-on-error: true
        run: npx playwright test
      - name: Publish TS filename
        if: failure()
        id: publish
        run: find tests/visual/ -type f -execdir echo 'visual-snapshots={}' >> $GITHUB_OUTPUT ';'
      - uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
      - name: Regression visual snapshots
        id: update-snapshot
        run: find tests/visual/ -type f -execdir echo 'visual-snapshots={}' >> $GITHUB_OUTPUT ';'
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-snapshot
          path: tests/visual/ubuntu-visual.spec.ts-snapshots/
          retention-days: 30
      #  visual-snapshots:
      #    needs: test
      #    runs-on: ubuntu-latest
      #   steps:
      - name: Get test artifacts
        uses: actions/download-artifact@v3
        if: failure()
        with:
          name: visual-snapshot
          path: tests/visual/ubuntu-visual.spec.ts-snapshots/
      - name: Output contents
        run: ls
      # - name: Output filename
      #   run: echo "${{ needs.test.outputs.visual-snapshots}}"
